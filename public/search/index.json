[{"content":"Golang\r下载链接 选择windows-amd64.msi版本即可\n配置环境变量\n在Path下新建如下内容\n1 %GOROOT%\\bin 还需要配置GOPATH作为以后存放go项目的位置\n通过cmd输入命令查看版本\n1 go version 配置GoLand\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } ","date":"2024-12-21T00:00:00Z","image":"http://localhost:1313/p/golang/202412211329268_hu13691399108471869930.png","permalink":"http://localhost:1313/p/golang/","title":"Golang"},{"content":"Mongodb\r下载Mongodb\n参考博客\n如果采用msi安装，则无需继续后续步骤配置为本地服务\n配置环境变量\n在path下新建D:\\env\\Database\\MongoDB\\bin\n运行MongoDB服务\n在data目录下新建db目录\n在db目录下打开cmd执行如下命令，即可启动mongodb服务\n1 mongod --dbpath D:\\env\\Database\\MongoDB\\data\\db 在浏览器中打开如下链接http://localhost:27017，可以看到如下页面就表示服务启动成功\n新建log目录用来存放日志\n配置mongo.config(与 bin 目录同级)\n1 2 dbpath=D:\\env\\Database\\MongoDB\\data\\db logpath=D:\\env\\Database\\MongoDB\\data\\log\\mongo.log 使用管理员权限打开cmd，切换到mongodb/bin目录下，并输入如下命令\n1 mongod -dbpath \u0026#34;D:\\env\\Database\\MongoDB\\data\\db\u0026#34; -logpath \u0026#34;D:\\env\\Database\\MongoDB\\data\\log\\mongo.log\u0026#34; -install -serviceName \u0026#34;MongoDB\u0026#34; 使用navicat连接mongodb\n","date":"2024-10-20T00:00:00Z","image":"http://localhost:1313/p/mongodb/202412211349060_hu18432554274727310962.png","permalink":"http://localhost:1313/p/mongodb/","title":"Mongodb"},{"content":"PostgreSQL\r下载链接\n参考博客\n参考博客2\n不要跟着截图一路走下去，后续有报错，先看完解决方法，尽量避免报错！！！\n这里报了一个警告\n参考博客\n但我尝试之后并未解决\n重新安装时，选择\n依然报错!!!\n参考如下博客后依然无法解决问题\ncd到postgresql/bin下，执行如下命令初始化数据库集群\n1 initdb -D \u0026#34;D:\\env\\Database\\PostgreSQL\\data\u0026#34; 注册成windows服务\n1 pg_ctl.exe register -N postgresql17 -D D:\\env\\Database\\PostgreSQL\\data 配置环境变量\n新建如下配置\n1 2 PGHOME D:\\env\\Database\\PostgreSQL\\17 在path下新建\n1 %PGHOME%\\bin navicat连接postgresql\n报错信息乱码\n参考博客\n1 2 # TYPE DATABASE USER ADDRESS METHOD host all all 0.0.0.0/0 trust 再次卸载重装\n参考博客\n这次终于解决问题\n1 initdb -D \u0026#34;D:\\env\\Database\\PostgreSQL\\data\u0026#34; -E UTF-8 --locale=Chinese 打开psql之后，一路默认，报错postgres角色不存在，所以接下来需要创建这个角色\n再次打开psql，username输入Administrator，其他默认\n1 CREATE USER postgres SUPERUSER; 至此成功\n","date":"2024-10-20T00:00:00Z","image":"http://localhost:1313/p/postgresql/202412211414934_hu261978600030145230.png","permalink":"http://localhost:1313/p/postgresql/","title":"PostgreSQL"},{"content":"Kotlin\r下载链接\n环境变量在path上添加如下内容\n1 D:\\env\\kotlinc\\bin 将D:\\env\\kotlinc替换成自己的安装路径\n查看信息\n1 kotlinc -version ","date":"2024-10-05T00:00:00Z","image":"http://localhost:1313/p/kotlin/202412211343389_hu6146871212167752059.png","permalink":"http://localhost:1313/p/kotlin/","title":"Kotlin"},{"content":"PHP8+Apache\r参考博客\n配置PHP\r下载链接 注意这里要下载Thread Safe的版本，而不是Non Thread Safe，否则后期整合Apache时会出现缺少必要文件\n复制php.ini-development文件，重命名为php.ini\n在该路径下输入命令查看版本信息\n1 php.exe -v 添加到环境变量到path\n1 D:\\env\\PHP8 然后输入如下命令即可查看版本信息\n1 php -v 配置Apache\r下载链接 下载Win64版本，解压之后关注Apache24目录的配置即可\n配置Apache24\\conf\\httpd.conf文件\n这里SRVROOT设置为自己的目录，需要注意路径中不要写\\，而是/\n这里的Listen就是启动的端口，默认是80，我这里修改为888，不修改也行\n只是如果安装了nginx，默认也是80端口，注意不要端口冲突\n进入安装目录后执行如下命令\n1 httpd.exe -k install 这里成功设置了开机自动运行\n也可以双击**Apache24\\bin\\ApacheMonitor.exe**文件也可以看到如下界面，点击start即可启动\n输入url查看，正常显示\n但此时Apache还不支持php，如果需要显示php页面，还需要进行额外配置\n修改php.ini文件\n新增如下内容，其中extension_dir后的内容修改成自己的ext目录\n1 extension_dir = \u0026#34;D:\\env\\PHP8\\ext\u0026#34; 还可以根据自己的需要来添加一些模块，删除前面的;即可\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 extension=curl ;extension=ffi ;extension=ftp extension=fileinfo extension=gd extension=gettext ;extension=gmp extension=intl ;extension=imap extension=mbstring ;extension=exif ; Must be after mbstring as it depends on it extension=mysqli ;extension=oci8_12c ; Use with Oracle Database 12c Instant Client ;extension=oci8_19 ; Use with Oracle Database 19 Instant Client extension=odbc extension=openssl extension=pdo_firebird extension=pdo_mysql extension=pdo_oci ;extension=pdo_odbc ;extension=pdo_pgsql extension=pdo_sqlite ;extension=pgsql ;extension=shmop 更新Apache的配置文件httpd.conf\n1 2 3 \u0026lt;IfModule dir_module\u0026gt; DirectoryIndex index.html \u0026lt;/IfModule\u0026gt; 修改为如下内容\n1 2 3 \u0026lt;IfModule dir_module\u0026gt; DirectoryIndex index.html index.php \u0026lt;/IfModule\u0026gt; 添加如下内容\n1 LoadModule php_module \u0026#34;PATH/php8apache2_4.dll\u0026#34; 同时还需要修改如下内容\n1 2 3 \u0026lt;IfModule dir_module\u0026gt; DirectoryIndex index.html index.php \u0026lt;/IfModule\u0026gt; 修改成\n1 2 3 4 5 6 \u0026lt;IfModule dir_module\u0026gt; PHPIniDir \u0026#34;D:/env/PHP8/\u0026#34; AddType application/x-httpd-php .php AddType application/x-httpd-source .phps DirectoryIndex index.html index.php \u0026lt;/IfModule\u0026gt; 这里的Path替换成自己的安装目录\n页面默认存放在htdocs目录下，这里我就不修改了\n在htdocs下新建index.php，内容如下\n1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;?php echo \u0026#34;Hello World!\u0026#34;; ?\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 如果网站涉及到了MySQL还需要进行配置\n解锁如下Module\n1 2 3 4 5 6 LoadModule access_compat_module modules/mod_access_compat.so LoadModule proxy_module modules/mod_proxy.so LoadModule proxy_http_module modules/mod_proxy_http.so LoadModule rewrite_module modules/mod_rewrite.so LoadModule vhost_alias_module modules/mod_vhost_alias.so LoadModule headers_module modules/mod_headers.so 测试一下，连接mysql是否成功\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt; \u0026lt;title\u0026gt;php\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;?php // 数据库配置信息 $servername = \u0026#34;localhost\u0026#34;; $username = \u0026#34;root\u0026#34;; $password = \u0026#34;123456\u0026#34;; $dbname = \u0026#34;php\u0026#34;; // 创建连接 $conn = new mysqli($servername, $username, $password, $dbname); // 检查连接 if ($conn-\u0026gt;connect_error) { die(\u0026#34;连接失败: \u0026#34; . $conn-\u0026gt;connect_error); } // SQL 查询语句 $sql = \u0026#34;SELECT id, username, password, nick_name FROM TB_USER\u0026#34;; $result = $conn-\u0026gt;query($sql); if ($result-\u0026gt;num_rows \u0026gt; 0) { // 输出每一行的数据 while ($row = $result-\u0026gt;fetch_assoc()) { echo \u0026#34;编号: \u0026#34; . $row[\u0026#34;id\u0026#34;] . \u0026#34; - 账号: \u0026#34; . $row[\u0026#34;username\u0026#34;] . \u0026#34; - 密码: \u0026#34; . $row[\u0026#34;password\u0026#34;] . \u0026#34; - 昵称: \u0026#34; . $row[\u0026#34;nick_name\u0026#34;] . \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } } else { echo \u0026#34;0 结果\u0026#34;; } $conn-\u0026gt;close(); ?\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 这里连接mysql的php数据库，并执行了如下sql\n1 SELECT id, username, password, nick_name FROM TB_USER; ","date":"2024-10-05T00:00:00Z","image":"http://localhost:1313/p/php8/202412211409504_hu18244191102103723910.png","permalink":"http://localhost:1313/p/php8/","title":"PHP8"},{"content":"开启WSL\r参考文章\n基本配置\r打开设置，选中应用\n选择程序和功能\n选择启用或关闭Windows功能\n勾选Hyper-v和适用于Linux的Windows子系统，然后重启电脑\n安装Linux子系统\r注意使用管理员权限运行cmd或者powershell\n1 2 3 4 # 下载或者更新 wsl --update # 重新启动 wsl --shutdown 前往微软商店下载Linux子系统\n搜索Linux，安装心仪的系统，这里以ubuntu为例\n启动系统后，会需要新建用户\n输入自定义用户名以及密码，即可新建用户\n配置docker\r配置docker过程查看博客\n以下是配置后的结果\n启动了两个容器，一个nginx，一个redis\n输入http://localhost:80/访问nginx界面\n客户端连接Redis成功\n配置ssh\r输入密码后切换为root用户\n1 sudo su 执行以下命令\n卸载WSL上自带的openssh并重装\n1 2 3 4 5 apt-get update apt-get remove openssh-server apt-get install openssh-server 修改ssh的配置\n1 vim /etc/ssh/sshd_config 先按住shift : 输入set nu，回车即可显示行数\n找到PermitRootLogin，改为yes\n将如下位置的注释取消掉\n然后保存并退出\n1 2 3 service ssh status service ssh start ip直接写127.0.0.1即可\n配置用户名、密码\n","date":"2024-06-02T00:00:00Z","image":"http://localhost:1313/p/wsl/202412211452323_hu12307168600953461512.png","permalink":"http://localhost:1313/p/wsl/","title":"WSL"},{"content":"测试环境概述 服务器端 操作系统：Windows Server 2008 企业版 64位 Oracle软件：Oracle 11g 64位 客户端 操作系统： Windows 7 64位 图形界面工具：PL/SQL Developer14.0.5 64位 Oracle客户端：Oracle Win64_11gR2_client\n第一步：下载服务端Oracle 11g安装包。\n下载地址： 链接 提取码：qwer\n官方网站下载地址： 链接1 链接2 链接2\n注意：下载OTN上的这些软件，你需要一个OTN免费帐号，不过如果通过迅雷进行下载，就不用登陆OTN了。 也可自行在官方网站内下载其他Oracle客户端或图形界面工具版本： https://www.oracle.com/database/technologies/instant-client/downloads.html\n第二步：Oracle 11g服务端安装 1、解压已经下载的文件，将两个压缩文件包同时解压到同一个目录下，点击“确定”。如下图所示： 2、打开安装包路径，找到【setup.exe】双击安装。如下图所示：\n3、安装前请确保电脑或服务器已经安装好microsoft .net framework\n3.5。如不知如何进行安装，可参考（点击后边文字即刻跳转）：如何在内网环境下离线安装.NET Framework3.5。双击安装等待。弹出安装窗口，配置安全更新，如图所示，点“下一步”，提示未提供邮件地址，点“是”跳过。\n4、安装选项配置，如图所示，点击“下一步”\n5、系统类配置，可根据自己需求进行选择。这里选择“桌面类”安装。\n6、典型安装配置，可按实际情况修改安装路径，输入管理口令后点“下一点”。\n因为是学习环境，所以口令输入比较简单，会提示密码复杂度校验提醒，安装会有如下提示，点“是”跳过即可。\n7、先决条件检查，物理环境检查无问题，进度条100%，安装自动跳转到下个安装界面。\n8、概要配置界面预览，如下图所示，点“完成”开始安装产品，等待，大概20分钟左右。\n安装过程中弹出“创建克隆数据库正在进行”，继续等待即可。\n弹框，可查看“口令管理”，建议点点看看就可以了，不必要纠结，点击口令管理下的“确定”。\n9、数据库创建完成，如图所示，点击“关闭”。\n到此Oracle就安装完成了。\n","date":"2024-02-16T00:00:00Z","image":"http://localhost:1313/p/oracle/202412211404987_hu10051977929522698601.png","permalink":"http://localhost:1313/p/oracle/","title":"Oracle"},{"content":"搭建Gitee图床\r我个人常用的markdown应用有typora、vscode和息流三款\ntypora收费，网络上有不少破解教程 vscode可以安装插件来写markdown文档，需要知道markdown的语法格式 息流使用起来相对更加简单，有免费空间限制，如果只是编写文档也足够了 在使用typora编写文档时，图片存储是个问题，虽然可以调整为相对路径存储，但是还需要保存好对应的本地图片，不然不知道图片被删掉了的话\u0026hellip; 相对路径存储\n这个时候可以搭建一个图床，需要先下载名为【PicGo】的工具 github下载地址 https://github.com/Molunerfinn/PicGo 123网盘下载地址 https://www.123pan.com/s/tMU0Vv-31zUd.html 安装好PicGo默认即可，之后需要创建一个Gitee仓库\n新建仓库\n创建私有仓库\n个人主页\n个人设置\n私人令牌\n生成新令牌\n提交信息\n复制令牌\n这里很重要了，最好是保存一下生成的这串令牌，后续无法再查看到了 接下来开始配置PicGo\n安装插件\n安装一下【gitee】插件\n配置Gitee信息\n上方的repo填写如下图片的地址\n仓库地址\ntoken则填写生成的【私人令牌】 接下来别忘了开源仓库\n进入私有仓库\n找到仓库后进入\n管理\n设置仓库\n添加readme文件\n再次进入管理\n开源Gitee仓库\n最后配置一下Typora的文件上传\n配置Typora\n为了避免上传的图片重名，可以打开PicGo的【时间戳重命名】配置\n配置时间戳\ntypora上传图片结果\n最后提一嘴，我使用过阿里云OSS和Github的图床，阿里云OSS倒是没什么问题，可能会有少许收费，Github懂得都懂，连接不太好毕竟是在国外，可能会造成图片传不上去，或者传上去了显示不出来\n","date":"2023-07-09T00:00:00Z","image":"http://localhost:1313/p/%E6%90%AD%E5%BB%BAgitee%E5%9B%BE%E5%BA%8A/202412211443704_hu3779382978942361160.png","permalink":"http://localhost:1313/p/%E6%90%AD%E5%BB%BAgitee%E5%9B%BE%E5%BA%8A/","title":"搭建Gitee图床"},{"content":"Apifox使用\r当请求跑通之后，可以保存为接口，生成api文档\r新建接口\r数据模型\r此时可以定义成功后的响应，也可以引用一下其他的数据模型 新建BaseResponse接口 引用数据模型 同理可以把data也引用对应的实体类数据模型（user、book、order\u0026hellip;） 自动生成测试数据\r","date":"2023-05-25T00:00:00Z","image":"http://localhost:1313/p/apifox/main-interface-dark_hu2826266290548158972.webp","permalink":"http://localhost:1313/p/apifox/","title":"Apifox"},{"content":"Clion配置\r准备工作\r仅用作学习记录，可点击下方【参考博客】的链接前往原博客，支持原创\n参考博客\nmingw-w64 如果下载速度太慢，可点击此处下载\n配置环境\r在环境变量的path中添加mingw64下bin的路径\n1 D:\\mingw64\\bin cmd输入gcc -v，若显示如下，表示成功\n配置Clion\r","date":"2023-05-25T00:00:00Z","image":"http://localhost:1313/p/clion/clion_ide_overview_hu11639118281139101265.png","permalink":"http://localhost:1313/p/clion/","title":"Clion"},{"content":"添加【通过XXX打开】的右键菜单\r推介使用ContextMenuManager进行管理，以下不再演示ContextMenuManager用法 参考博文\n暂时还没有以webstorm打开的快捷方式 win+R，输入regedit\n新建项，命名为webstorm\n步骤4\n点击默认项，输入Open Folder as WebStorm Project\n设置图标\n命名为Icon 赋值webStorm文件路径 设置之前新建的Icon的值\n参考\u0026quot;D:\\IntelliJ IDEA 2022.3.1\\bin\\idea64.exe\u0026quot; \u0026quot;%1\u0026quot;这个命令，将文件路径换成自己的，其他不变\n","date":"2023-03-27T00:00:00Z","image":"http://localhost:1313/p/%E6%B7%BB%E5%8A%A0%E9%80%9A%E8%BF%87xxx%E6%89%93%E5%BC%80%E7%9A%84%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu4898064707681593350.jpg","permalink":"http://localhost:1313/p/%E6%B7%BB%E5%8A%A0%E9%80%9A%E8%BF%87xxx%E6%89%93%E5%BC%80%E7%9A%84%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/","title":"添加\"通过XXX打开\"的右键菜单"},{"content":"Hbuilder配置\r关闭更新提示\r工具 设置 常用配置（拉到最下面） 运行到谷歌浏览器失败\r链接：https://pan.baidu.com/s/178gTB9MOQXGMaC_m7QXFdQ?pwd=1234 提取码：1234\n","date":"2023-03-25T00:00:00Z","image":"http://localhost:1313/p/hbuilder/202412211333217_hu9375312175773522084.png","permalink":"http://localhost:1313/p/hbuilder/","title":"Hbuilder"},{"content":"安装\rSpring Tools Suite 3\rspring-tool-suite-3.9.18 遇到的问题如下\n解决方法 装的jdk1.8，却显示17，这不是离谱吗？\njava_home配置也没有问题，确实是1.8的路径 原因出在oracle这里，将oracle一道java环境变量之下即可\n到这里还是依然报错，java版本不在11以上\n网上说把ini文件的11改为1.8即可，但我的还是报错，还是直接配置3.9.11版本或者sts4吧\n官网 spring-tool-suite-3.9.18（不推介） spring-tool-suite-3.9.11（推介） Spring Tools Suite 4\rspring-tool-suite-4-4.3.1\n配置\r取消空格或分号自动补全\r1 .abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY 快捷键配置\r这个是按照我的习惯配置的，如果不需要配置，请直接跳过 复制整行，如idea的ctrl+d，我习惯配置alt+d\n这个是代码提示快捷键\nformat 格式化代码快捷键\n方法提取(Extract method)\n全局查找(Find Text in File)\n开启注解提示\r配置maven\r配置本地java\r编码配置\r配置Lombok插件\rlombok jar包\n将lombok放在sts.exe文件处 双击jar包 配置字体\r配置代码模板\r自动导包\r配置tomcat\rwindow》show view》other》servers\n普通的java项目如何使用jar包\r","date":"2023-03-04T00:00:00Z","image":"http://localhost:1313/p/sts/202412211431425_hu16431733443616631176.png","permalink":"http://localhost:1313/p/sts/","title":"STS"},{"content":"tomcat安装及配置\rtomcat-8.5.87安装\n环境变量配置\r1 2 3 4 5 6 7 新建 CATALINA_HOME 值：解压后的路径，如D:\\apache-tomcat-8.5.87 path，新建 %CATALINA_HOME%\\bin 验证是否配置成功？ cmd输入startup.bat 打开localhost:8080 tomcat乱码\r","date":"2023-03-04T00:00:00Z","image":"http://localhost:1313/p/tomcat/202412211436947_hu11472220631305509025.png","permalink":"http://localhost:1313/p/tomcat/","title":"Tomcat"},{"content":"JDK下载\rjdk下载\nJava环境变量配置\r1 2 3 4 5 JAVA_HOME D:\\java\\jdk Path编辑，新增 %JAVA_HOME%\\bin %JAVA_HOME%\\jre\\bin ","date":"2023-02-18T00:00:00Z","image":"http://localhost:1313/p/java/202412211340865_hu6537549549681616775.png","permalink":"http://localhost:1313/p/java/","title":"Java"},{"content":"MySQL安装\r一直next 剩下的默认即可，一直next\nmysql环境变量配置\r1 2 path添加 D:\\MySQL\\MySQL Server 8.0\\bin MySQL时区配置\r打开mysql的安装目录，比如我的是D:\\MySQL\\MySQL Server 8.0 打开my.ini，添加下面这句，重启服务\n1 2 3 # [mysqld] # 永久更改时区，解决连接mysql时timeout的情况 default-time_zone = \u0026#39;+8:00\u0026#39; 1 2 # 查看时区是否设置成功 show variables like \u0026#34;%time_zone%\u0026#34;; 1 2 3 4 5 6 7 8 mysql\u0026gt; show variables like \u0026#34;%time_zone%\u0026#34;; +------------------+--------+ | Variable_name | Value | +------------------+--------+ | system_time_zone | | | time_zone | +08:00 | +------------------+--------+ 2 rows in set, 1 warning (0.01 sec) 若出现以上结果即可\n","date":"2023-02-18T00:00:00Z","image":"http://localhost:1313/p/mysql/202412211354776_hu17520397624041452420.png","permalink":"http://localhost:1313/p/mysql/","title":"MySQL"},{"content":"PowerDesigner安装\rPowerDesigner破解\r复制pdflm16.dll破解文件至安装文件夹，替换掉原本的文件\n注册表配置\r安装PowerDesigner之后，右键新建又多出了超级多的文件，这一步就是删除掉这些\n这数量，是不是巨恐怖？\nwin+R输入regedit，回车\n看一下文件后缀\n1 2 3 4 5 6 7 8 9 10 .BPM .CDM .DMM .EAM .FEM .LDM .OOM .PDM .RQM .XSM ","date":"2023-02-18T00:00:00Z","image":"http://localhost:1313/p/powerdesigner/202412211427344_hu18091534060713237772.png","permalink":"http://localhost:1313/p/powerdesigner/","title":"PowerDesigner"},{"content":"Idea配置\r快捷键\r1 2 3 4 5 6 7 代码重排(reformat code)-\u0026gt;(ctrl+k) run context configuration-\u0026gt;(F5) # 可有可无 delete line-\u0026gt;(ctrl+d) 代码提示(basic)-\u0026gt;alt+? 方法提取(Extract method)-\u0026gt;(ctrl+alt+M) 全局查找(Find in files)-\u0026gt;(ctrl+H) 向下复制(Duplicate Line or Selection)-\u0026gt;(alt+D) 自动注释模板\r1 2 3 4 5 /** * @Auther: ${USER} * @Date: ${YEAR}/${MONTH}/${DAY}/${TIME} * @Description: */ 修改编码\r自动导包\r忽视代码大小写\r关闭自动更新\rtab页多行显示设置\rJava注释优化代码注释前空格格式\r开启代码自动编译\r去除idea自带的.iml文件，以及.idea文件夹\r配置maven\ridea启动时展开项目列表\rpom文件依赖报黄\r配置YML模板\r1.这种是直接添加new的文件 2.这种才类似添加用户的模板 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 server: # 应用服务 WEB 访问端口 port: 8080 spring: # 应用名称 TODO application: name: demo datasource: # 数据库驱动： driver-class-name: com.mysql.cj.jdbc.Driver # 数据源名称 name: defaultDataSource # 数据库连接地址 url: jdbc:mysql://localhost:3306/blue?serverTimezone=UTC # 数据库用户名\u0026amp;密码： username: root password: 123456 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 spring: application: name: demo cloud: nacos: # 服务注册 discovery: server-addr: localhost:8848 # 服务配置 config: server-addr: localhost:8848 # 命名空间 # namespace: # b6625ff9-0949-464b-bad3-fe4cf7858223 # ext-config: # - data-id: # oss.yml # group: # DEFAULT_GROUP # refresh: true 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;artifactId\u0026gt;demo\u0026lt;/artifactId\u0026gt; \u0026lt;groupId\u0026gt;com.example.demo\u0026lt;/groupId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.example.common\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;demo-common\u0026lt;/artifactId\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;8\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;8\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt; \u0026lt;druid.version\u0026gt;1.1.10\u0026lt;/druid.version\u0026gt; \u0026lt;servlet-api.version\u0026gt;2.3\u0026lt;/servlet-api.version\u0026gt; \u0026lt;validation-api.version\u0026gt;2.0.1.Final\u0026lt;/validation-api.version\u0026gt; \u0026lt;httpcore.version\u0026gt;4.4.15\u0026lt;/httpcore.version\u0026gt; \u0026lt;commons-lang.version\u0026gt;2.6\u0026lt;/commons-lang.version\u0026gt; \u0026lt;lombok.version\u0026gt;1.18.24\u0026lt;/lombok.version\u0026gt; \u0026lt;mybatis-plus.version\u0026gt;3.5.1\u0026lt;/mybatis-plus.version\u0026gt; \u0026lt;mysql.version\u0026gt;8.0.30\u0026lt;/mysql.version\u0026gt; \u0026lt;spring-cloud-alibaba.version\u0026gt;2.2.9.RELEASE\u0026lt;/spring-cloud-alibaba.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!--druid连接池--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;druid\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${druid.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--servlet-api--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.servlet\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;servlet-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${servlet-api.version}\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--参数校验--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.validation\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;validation-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${validation-api.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--httpcore--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.httpcomponents\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;httpcore\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${httpcore.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--commons-lang--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;commons-lang\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-lang\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${commons-lang.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--lombok--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${lombok.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--mybatis-plus--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.baomidou\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis-plus-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${mybatis-plus.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--mysql--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-java\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${mysql.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--服务注册/发现--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--配置中心--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-config\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-alibaba-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-cloud-alibaba.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;/project\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # 应用名称 TODO spring.application.name=demo # 应用服务 WEB 访问端口 server.port=8080 # 数据库驱动： spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver # 数据库连接地址 spring.datasource.url=jdbc:mysql://localhost:3306/blue?serverTimezone=UTC # 数据库用户名\u0026amp;密码： spring.datasource.username=root spring.datasource.password=123456 # 数据源名称 # spring.datasource.name=com.alibaba.druid.pool.DruidDataSource spring.datasource.name=defaultDataSource # 配置mybatis-plus 打印sql日志 mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl # xml文件路径 mybatis-plus.mapper-locations=classpath:/mapper/**/*.xml # 配置mybatis-plus 包路径 TODO mybatis-plus.type-aliases-package=com.example.demo.entity # mybatis-plus下划线转驼峰配置，默认为true mybatis-plus.configuration.map-underscore-to-camel-case=true # 配置全局默认主键类型，实体类不用加@TableId(value =\u0026#34;id\u0026#34;,type = IdType.AUTO) mybatis-plus.global-config.db-config.id-type=auto # 1代表已经删除，0代表没有删除 mybatis-plus.global-config.db-config.logic-delete-value=1 mybatis-plus.global-config.db-config.logic-not-delete-value=0 idea本地缓存异常\rmybatis-plus xml报黄\r类上注释报黄\r找到java下的javadoc\ndescription,createDate == @description @createDate\ndescription:,createDate: == @description: @createDate:\nmapper层注入爆红，红色波浪线\rLombok requires enabled annotation processin\r![image-20230120211525558](https://raw.githubusercontent.com/IsUnderAchiever/markdown-img/master/PicGo01/202301202115626.png)\r## lombok注解失效\r\u003e lombok注解失效，运行时提示找不到某个参数或方法\r解决方法有以下三种可能（我个人是第三种）：\r1. 更新lombok版本\r2. mvn clean后重新导入\r3. 加入 `-Djps.track.ap.dependencies=false`\r![image-20230311100422978](https://raw.githubusercontent.com/IsUnderAchiever/markdown-img/master/PicGo01/202303111004136.png)\r## pom文件变成灰色\r\u003e 原因，可能是之前创建项目后删除重建，所以idea排除了这个模块\r\u003e\r\u003e Setting-\u003eBuild Tools-\u003eMaven-\u003eIgnored Files `去掉勾选项即可`\r打开项目后没有显示项目结构\r选择import\nidea配置项目根目录\ridea好用的插件\rAlibaba Java Coding Guidelines\r阿里代码规范检查工具 CodeGlance2\r代码缩略图 Easy Javadoc\r自动生成类和方法的注释 Gitee\r将项目分享至gitee 将gitee项目克隆值idea LeetCode Editor\rLeetCode刷题 Maven Helper\r解决maven jar包冲突问题 MyBatisX\r快速生成实体类、mapper、mapper.xml、service、serviceimpl代码 RestfulTool\r帮助基于restful服务开发的插件 查看请求路径，在项目运行之后还能发送请求查看返回结果 SequenceDiagram\r生成时序图 Show comment\r显示注解，在方法上写好注解后，以后用到该方法的地方会看到写好的注解 statistic\r统计代码量 Tabnine\r生成代码提示 Translation\r翻译插件 Rainbow Brackets\r彩虹括号，以不同的颜色显示每队括号，方便括号配对 快捷键\r同时编辑多处\r按住alt+shift，点击多处即可\n方法提取\r方法提取(Extract method)alt+shift+m\n","date":"2023-01-19T00:00:00Z","image":"http://localhost:1313/p/idea/overview-heading-screenshot_hu12432599690232039664.webp","permalink":"http://localhost:1313/p/idea/","title":"Idea"},{"content":"maven下载\rmaven官网\n最新版\r历史版\r还是刚刚最新版的页面，往下拉，找到archives，或者点击链接前往 maven配置\r新建环境变量MAVEN_HOME\n1 D:\\apache-maven-3.8.6 系统变量path新建%MAVEN_HOME%\\bin\n1 %MAVEN_HOME%\\bin cmd窗口查看版本\n1 mvn -v 新建maven仓库repository【新建repository文件夹】 配置setting.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;localRepository\u0026gt;D:\\apache-maven-3.8.6\\repository\u0026lt;/localRepository\u0026gt; \u0026lt;!-- 阿里云仓库 --\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;alimaven\u0026lt;/id\u0026gt; \u0026lt;mirrorOf\u0026gt;central\u0026lt;/mirrorOf\u0026gt; \u0026lt;name\u0026gt;aliyun maven\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://maven.aliyun.com/nexus/content/repositories/central/\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; \u0026lt;!-- java版本 --\u0026gt; \u0026lt;profile\u0026gt; \u0026lt;id\u0026gt;jdk-1.8\u0026lt;/id\u0026gt; \u0026lt;activation\u0026gt; \u0026lt;activeByDefault\u0026gt;true\u0026lt;/activeByDefault\u0026gt; \u0026lt;jdk\u0026gt;1.8\u0026lt;/jdk\u0026gt; \u0026lt;/activation\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;1.8\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;1.8\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;maven.compiler.compilerVersion\u0026gt;1.8\u0026lt;/maven.compiler.compilerVersion\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;/profile\u0026gt; ","date":"2023-01-19T00:00:00Z","image":"http://localhost:1313/p/maven/maven-logo-black-on-white_hu1659603913382017004.png","permalink":"http://localhost:1313/p/maven/","title":"Maven"},{"content":"nvm安装\r前往下载 默认就好，免得配置环境\r在nvm文件夹下找到setting.txt，进行如下配置 1 2 3 4 5 6 7 8 ##当前操作系统的位数（32/64） arch: 64 ##是否需要代理 proxy: none ##node的淘宝镜像 node_mirror: http://npm.taobao.org/mirrors/node/ ##npm的淘宝镜像 npm_mirror: https://npm.taobao.org/mirrors/npm/ 1 2 3 4 5 ## nvm下载nodejs nvm install 14.17.2 nvm use 14.17.2 nvm install 16.13.2 nvm use 16.13.2 1 2 3 4 5 6 7 8 9 10 ## 安装cnpm,将npm设置为淘宝镜像 ## 安装 npm install -g cnpm --registry=https://registry.npm.taobao.org ## 设置 npm config set registry https://registry.npm.taobao.org ## 安装vue/cli cnpm install -g @vue/cli ## 检查是否安装成功 #vue -V 或者 vue --version 创建一个vue项目试试\r1 vue create demo 选择manually select features 手动创建 选择TypeScript、Router、Vuex，取消掉Linter/Formatter 选择3.X 根据提示运行命令\n1 2 cd demo npm run serve 安装nodejs\r网址 一直默认即可（安装地址自定义） 环境变量 path新建\u0026quot;D:\\nodejs\u0026quot; 在 nodejs 安装目录下，创建 “node_global” 和 “node_cache” 两个文件夹\n1 2 npm config set prefix \u0026#34;D:\\nodejs\\node_global\u0026#34; npm config set cache \u0026#34;D:\\nodejs\\node_cache\u0026#34; 环境变量 path新建\u0026quot;D:\\nodejs\\node_global\u0026quot;\n1 2 3 npm config get registry npm config set registry https://registry.npm.taobao.org/ npm config get registry ","date":"2023-01-19T00:00:00Z","image":"http://localhost:1313/p/nvm/202412211357864_hu369094255779482265.png","permalink":"http://localhost:1313/p/nvm/","title":"Nvm"},{"content":"基本配置\r配置实时翻译\r参考教程如下\n教程1\n教程2 点击此处登录百度翻译\n点击开始注册\n","date":"2022-12-27T00:00:00Z","image":"http://localhost:1313/p/potplayer/202412211456063_hu7238449547905668932.png","permalink":"http://localhost:1313/p/potplayer/","title":"Potplayer"},{"content":"\n直接右键，可以选择在终端中打开//windows terminal here\n方便很多 这里有两种安装方法\n微软商店安装 github安装 第一种直接打开商店搜索Windows Terminal后安装即可 第二种点击链接 配置右键打开终端\r在C:\\Users\\用户名\\AppData\\Local下建立文件夹Terminal 新建一个空白的reg注册表文件，命名为terminal.reg，可以使用txt变换后缀得到 编辑terminal.reg文件，写入如下语句，这里的%USERPROFILE%可以换成绝对路径C:\\Users\\用户名\n1 2 3 4 5 6 Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt] @=\u0026#34;打开终端\u0026#34; \u0026#34;Icon\u0026#34;=\u0026#34;%USERPROFILE%\\\\AppData\\\\Local\\\\Terminal\\\\terminal.ico\u0026#34; [HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt\\command] @=\u0026#34;C:\\\\Users\\\\用户名\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps\\\\wt.exe\u0026#34; 然后双击注册表文件即可 具体步骤可查看安装+美化\n","date":"2022-12-27T00:00:00Z","image":"http://localhost:1313/p/terminal/settings-default-shell_hu10230822076856537688.png","permalink":"http://localhost:1313/p/terminal/","title":"Terminal"},{"content":"Docker环境配置\r安装VirtualBox 安装vagrant 安装完成vagrant后重启一下系统 验证vagrant是否安装成功 cmd输入vagrant，是否有命令提示 使用vagrant创建虚拟机——官方镜像仓库\r1 vagrant init centos/7 此时在E盘已经生成了一个名为“Vagrantfile”的文件 启动虚拟环境 1 2 3 4 5 vagrant up # 如果速度很慢，使用提前下载好的CentOS7镜像，速度嘎嘎快 # vagrant init centos/7 # 没初始化的，要初始化 vagrant box add centos/7 CentOS-7-x86_64-Vagrant-2004_01.VirtualBox.box vagrant up ctrl+c停掉\n1 vagrant ssh 提示[vagrant@localhost ~]$ 连接成功，此时已经可以在VirtualBox内查看到该虚拟机 若提示 vagrant@127.0.0.1: Permission denied (publickey,gssapi-keyex,gssapi-with-mic). 则输入命令set VAGRANT_PREFER_SYSTEM_BIN=0 后再重新连接即可 退出vagrant的方法：输入命令exit 以文本的方式打开Vagrantfile，找到这一行配置 1 # config.vm.network \u0026#34;private_network\u0026#34;, ip: \u0026#34;192.168.33.10\u0026#34; 所以我们需要将虚拟机改为192.168.56.XX 即更改为\n1 # config.vm.network \u0026#34;private_network\u0026#34;, ip: \u0026#34;192.168.56.10\u0026#34; 1 vagrant reload 重启虚拟机\n1 2 3 vagrant ssh ip addr # 查看虚拟机ip地址是否已经发生了改变 ping 192.168.xxx # 主机与虚拟机是否互相ping通 安装docker\r概念：什么是docker？ 虚拟化容器技术。Docker基于镜像，可以秒级启动各种容器。每一种容器都是一个完整的运行环境，容器之间互相隔离。\ndocker的镜像市场\r安装docker\n1 2 3 4 5 6 7 8 9 10 vagrant ssh # 连接虚拟机 sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine # 卸载旧版本的docker 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 sudo yum install -y yum-utils sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin # 过程需要输入y选择确认 # 启动docker sudo systemctl start docker # 查看docker版本 docker -v # 查看docker安装了哪些镜像 sudo docker images # 设置docker开机自启动 sudo systemctl enable docker 镜像加速\r登录阿里云后，进入 控制台，左侧菜单找到 “产品与服务”，选择“容器镜像服务”，选择“镜像工具”，点击“镜像加速器”\n1 2 3 4 5 6 7 8 9 10 11 12 # 执行以下四个命令 sudo mkdir -p /etc/docker #---------------------------------- sudo tee /etc/docker/daemon.json \u0026lt;\u0026lt;-\u0026#39;EOF\u0026#39; { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://g9nk2v6o.mirror.aliyuncs.com\u0026#34;] } EOF #---------------------------------- sudo systemctl daemon-reload #---------------------------------- sudo systemctl restart docker /etc/docker/daemon.json\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://docker.m.daocloud.io\u0026#34;, \u0026#34;https://dockerproxy.com\u0026#34;, \u0026#34;https://docker.mirrors.ustc.edu.cn\u0026#34;, \u0026#34;https://docker.nju.edu.cn\u0026#34; ], \u0026#34;exec-opts\u0026#34;: [\u0026#34;native.cgroupdriver=systemd\u0026#34;], \u0026#34;log-driver\u0026#34;: \u0026#34;json-file\u0026#34;, \u0026#34;log-opts\u0026#34;: { \u0026#34;max-size\u0026#34;: \u0026#34;100m\u0026#34; }, \u0026#34;storage-driver\u0026#34;: \u0026#34;overlay2\u0026#34; } 切换root用户\r每次sudo很麻烦？直接切换root用户\n1 2 su root # 默认密码是vagrant 连接XShell\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 vagrant ssh # 切换为root用户 sudo -i # 修改root用户密码 passwd sudo vi /etc/ssh/sshd_config # 找到PasswordAuthentication yes这一行，去掉前面的# # # To disable tunneled clear text passwords, change to no here! # PasswordAuthentication yes # #PermitEmptyPasswords no # PasswordAuthentication no # 保存后退出 # 重启sshd服务 systemctl restart sshd # 使用ssh工具进行连接 详情请查看这篇博客\n安装MySQL\r连接上虚拟机之后 在docker镜像仓库搜索mysql，进入tags可查看版本信息\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 #------- 安装mysql5.7----------------- # docker pull mysql # 会下载最新的mysql # 下载指定版本的mysql，比如5.7 # docker pull mysql:5.7 sudo docker pull mysql:5.7 sudo docker run -p 3306:3306 \\ -v /mydata/mysql/log:/var/log/mysql \\ -v /mydata/mysql/data:/var/lib/mysql \\ -v /mydata/mysql/conf:/etc/mysql \\ -e MYSQL_ROOT_PASSWORD=123456 \\ -d mysql:8.0.20 \\ --name mysql # 查看mysql是否运行 docker ps # 没有查看到容器 # 查看,发现容器是退出状态 docker ps -a # Exited # 运行以下命令 docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root mysql # 若依然存在问题,可以停用并删除容器,重新启动mysql docker stop $(docker ps -q) docker rm $(docker ps -aq) # 删除镜像 docker rmi 镜像id # docker 删除报错: Error response from daemon: conflict: unable to delete 8e6aee9da407 (must be forced) - image is referenced in multiple repositories # 解决办法 docker rmi -f 镜像id # docker 服务命令 # 启动： # systemctl start docker # 守护进程重启： # systemctl daemon-reload # 重启docker服务： # systemctl restart docker / service docker restart # 关闭： # docker service docker stop / docker systemctl stop docker # 问题解决之后------ # 进入配置文件挂载的目录下 cd /mydata/mysql/conf # 编辑配置文件my.cnf vi my.cnf [client] default-character-set=utf8 [mysql] default-character-set=utf8 [mysqld] init_connect=\u0026#39;SET collation_connection = utf8_unicode_ci\u0026#39; init_connect=\u0026#39;SET NAMES utf8\u0026#39; character-set-server=utf8 collation-server=utf8_unicode_ci skip-character-set-client-handshake skip-name-resolve # 重启mysql容器 docker restart mysql # 设置启动docker时，mysql自启动 docker update mysql --restart=always #------- 安装mysql8.0.20----------------- #拉取镜像 docker pull mysql:8.0.20 #启动镜像,用于拷贝配置文件到宿主机 docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0.20 #查看是否启动成功 docker ps -a #新建挂载目录并拷贝配置文件 mkdir -p /mysqldata/ docker cp mysql:/etc/mysql /mysqldata/ #检查是否运行成功 docker ps -a # 重启mysql容器 docker restart mysql # 设置启动docker时，mysql自启动 docker update mysql --restart=always # 使用Navicat链接mysql # ql自启动 docker update mysql --restart=always Redis配置\r1 2 # 下载最新redis镜像 docker pull redis 1 2 3 4 5 6 mkdir -p /mydata/redis/conf cd /mydata/redis/conf touch redis.conf docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \\ -v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\ -d redis redis-server /etc/redis/redis.conf 1 2 # 测试一下redis docker exec -it redis redis-cli 1 2 3 4 5 6 7 # redis默认配置是没有持久化的 # 如果重启redis，再获取之前的数据就获取不到了 # 具体命令可查看下图 vi redis.conf # 【输入 i 进入插入模式】 # 开启AOF持久化 appendonly yes 修改redis的密码\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 创建容器时设置密码 # docker run -itd --name redis-6379 -p 6379:6379 redis --requirepass 123456 # 为现有的redis创建密码或修改密码 #1.进入redis的容器 docker exec -it 容器ID bash #2.进入redis目录 cd /usr/local/bin #3.运行命令： redis-cli #4.查看现有的redis密码： config get requirepass # 这一步若报错(error) NOAUTH Authentication required. # 是因为redis本身设置有密码，此时需要执行以下命令 auth password; # password是之前设置的redis密码 #5.设置redis密码 config set requirepass 密码 # 清空redis密码 config set requirepass \u0026#34;\u0026#34; 安装redis可视化工具\r链接：https://pan.baidu.com/s/10z0S6b9mo76CWK9y3spPRg?pwd=51tz 提取码：51tz \u0026ndash;来自百度网盘超级会员V3的分享 点击New Connection右边的按钮，可进入设置页面，设置语言 docker安装ElasticSearch\r1.黑马程序员视频内安装方法：\r链接：https://pan.baidu.com/s/1pGnbmkMjD8RXe5Y4xotfOA?pwd=ihe5 提取码：ihe5 将其上传到虚拟机中，然后运行命令加载即可：\n1 2 # 导入数据 docker load -i es.tar 同理还有kibana的tar包也需要这样做。 运行docker命令，部署单点es：\n1 2 3 4 5 6 7 8 9 10 11 docker run -d \\ --name es \\ -e \u0026#34;ES_JAVA_OPTS=-Xms512m -Xmx512m\u0026#34; \\ -e \u0026#34;discovery.type=single-node\u0026#34; \\ -v es-data:/usr/share/elasticsearch/data \\ -v es-plugins:/usr/share/elasticsearch/plugins \\ --privileged \\ --network es-net \\ -p 9200:9200 \\ -p 9300:9300 \\ elasticsearch:7.12.1 1 2 3 4 5 6 7 8 docker run -d \\ --name elasticsearch \\ -v /home/tong/software/docker/elasticsearch/data:/usr/share/elasticsearch/data \\ -v /home/tong/software/docker/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\ -v /home/tong/software/docker/elasticsearch/config:/usr/share/elasticsearch/config \\ -p 9200:9200 \\ -p 9300:9300 \\ elasticsearch:8.7.0 1 2 3 4 5 docker run -d \\ --name elasticsearch \\ -p 9200:9200 \\ -p 9300:9300 \\ elasticsearch:8.7.0 命令解释：\n-e \u0026quot;cluster.name=es-docker-cluster\u0026quot;：设置集群名称 -e \u0026quot;http.host=0.0.0.0\u0026quot;：监听的地址，可以外网访问 -e \u0026quot;ES_JAVA_OPTS=-Xms512m -Xmx512m\u0026quot;：内存大小 -e \u0026quot;discovery.type=single-node\u0026quot;：非集群模式 -v es-data:/usr/share/elasticsearch/data：挂载逻辑卷，绑定es的数据目录 -v es-logs:/usr/share/elasticsearch/logs：挂载逻辑卷，绑定es的日志目录 -v es-plugins:/usr/share/elasticsearch/plugins：挂载逻辑卷，绑定es的插件目录 --privileged：授予逻辑卷访问权 --network es-net ：加入一个名为es-net的网络中 -p 9200:9200：端口映射配置 运行docker命令，部署kibana 1 2 3 4 5 6 docker run -d \\ --name kibana \\ -e ELASTICSEARCH_HOSTS=http://es:9200 \\ --network=es-net \\ -p 5601:5601 \\ kibana:7.12.1 --network es-net ：加入一个名为es-net的网络中，与elasticsearch在同一个网络中 -e ELASTICSEARCH_HOSTS=http://es:9200\u0026quot;：设置elasticsearch的地址，因为kibana已经与elasticsearch在一个网络，因此可以用容器名直接访问elasticsearch -p 5601:5601：端口映射配置 kibana启动一般比较慢，需要多等待一会，可以通过命令： 1 docker logs -f kibana 查看运行日志，当查看到下面的日志，说明成功： 2.网上的安装方法：\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 下载镜像文件 docker pull elasticsearch:7.4.2 # 创建搭载目录 mkdir -p /mydata/elasticsearch/config mkdir -p /mydata/elasticsearch/data echo \u0026#34;http.host: 0.0.0.0\u0026#34; \u0026gt; /mydata/elasticsearch/config/elasticsearch.yml docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \\ -e \u0026#34;discovery.type=single-node\u0026#34; \\ -e ES_JAVA_OPTS=\u0026#34;-Xms64m -Xmx512m\u0026#34; \\ -v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\ -v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \\ -v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\ -d elasticsearch:7.4.2 docker ps# 查看容器状态 up 运行 若存在问题，查看这篇博客 我这里的问题是启动的时候没问题，但是过一会有自动关闭 解决问题和上方博客中写的一样\n1 2 chmod -R 777 /mydata/elasticsearch/ docker start elasticsearch 查看运行结果 http://虚拟机ip地址:9200/ 安装Kibana\r1 2 3 4 # 下载镜像文件 docker pull kibana:7.4.2 # 安装容器 docker run --name kibana -e ELASTICSEARCH_HOSTS=http://自己的IP:9200 -p 5601:5601 -d kibana:7.4.2 安装ik分词器\rik分词器下载地址\n3.1.在线安装ik插件（较慢）\r1 2 3 4 5 6 7 8 # 进入容器内部 docker exec -it elasticsearch /bin/bash # 在线下载并安装 ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip #退出 exit #重启容器 docker restart elasticsearch 3.2.离线安装ik插件（推荐）\r1）查看数据卷目录\r安装插件需要知道elasticsearch的plugins目录位置，而我们用了数据卷挂载，因此需要查看elasticsearch的数据卷目录，通过下面命令查看:\n1 docker volume inspect es-plugins 显示结果：\n1 2 3 4 5 6 7 8 9 10 11 [ { \u0026#34;CreatedAt\u0026#34;: \u0026#34;2022-05-06T10:06:34+08:00\u0026#34;, \u0026#34;Driver\u0026#34;: \u0026#34;local\u0026#34;, \u0026#34;Labels\u0026#34;: null, \u0026#34;Mountpoint\u0026#34;: \u0026#34;/var/lib/docker/volumes/es-plugins/_data\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;es-plugins\u0026#34;, \u0026#34;Options\u0026#34;: null, \u0026#34;Scope\u0026#34;: \u0026#34;local\u0026#34; } ] 说明plugins目录被挂载到了：/var/lib/docker/volumes/es-plugins/_data 这个目录中。\n2）解压缩分词器安装包\r下面我们需要把课前资料中的ik分词器解压缩，重命名为ik 3）上传到es容器的插件数据卷中\r也就是/var/lib/docker/volumes/es-plugins/_data ： 4）重启容器\r1 2 # 4、重启容器 docker restart es 1 2 # 查看es日志 docker logs -f es 5）测试：\rIK分词器包含两种模式：\nik_smart：最少切分 ik_max_word：最细切分 1 2 3 4 5 GET /_analyze { \u0026#34;analyzer\u0026#34;: \u0026#34;ik_max_word\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;黑马程序员学习java太棒了\u0026#34; } 结果：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 { \u0026#34;tokens\u0026#34; : [ { \u0026#34;token\u0026#34; : \u0026#34;黑马\u0026#34;, \u0026#34;start_offset\u0026#34; : 0, \u0026#34;end_offset\u0026#34; : 2, \u0026#34;type\u0026#34; : \u0026#34;CN_WORD\u0026#34;, \u0026#34;position\u0026#34; : 0 }, { \u0026#34;token\u0026#34; : \u0026#34;程序员\u0026#34;, \u0026#34;start_offset\u0026#34; : 2, \u0026#34;end_offset\u0026#34; : 5, \u0026#34;type\u0026#34; : \u0026#34;CN_WORD\u0026#34;, \u0026#34;position\u0026#34; : 1 }, { \u0026#34;token\u0026#34; : \u0026#34;程序\u0026#34;, \u0026#34;start_offset\u0026#34; : 2, \u0026#34;end_offset\u0026#34; : 4, \u0026#34;type\u0026#34; : \u0026#34;CN_WORD\u0026#34;, \u0026#34;position\u0026#34; : 2 }, { \u0026#34;token\u0026#34; : \u0026#34;员\u0026#34;, \u0026#34;start_offset\u0026#34; : 4, \u0026#34;end_offset\u0026#34; : 5, \u0026#34;type\u0026#34; : \u0026#34;CN_CHAR\u0026#34;, \u0026#34;position\u0026#34; : 3 }, { \u0026#34;token\u0026#34; : \u0026#34;学习\u0026#34;, \u0026#34;start_offset\u0026#34; : 5, \u0026#34;end_offset\u0026#34; : 7, \u0026#34;type\u0026#34; : \u0026#34;CN_WORD\u0026#34;, \u0026#34;position\u0026#34; : 4 }, { \u0026#34;token\u0026#34; : \u0026#34;java\u0026#34;, \u0026#34;start_offset\u0026#34; : 7, \u0026#34;end_offset\u0026#34; : 11, \u0026#34;type\u0026#34; : \u0026#34;ENGLISH\u0026#34;, \u0026#34;position\u0026#34; : 5 }, { \u0026#34;token\u0026#34; : \u0026#34;太棒了\u0026#34;, \u0026#34;start_offset\u0026#34; : 11, \u0026#34;end_offset\u0026#34; : 14, \u0026#34;type\u0026#34; : \u0026#34;CN_WORD\u0026#34;, \u0026#34;position\u0026#34; : 6 }, { \u0026#34;token\u0026#34; : \u0026#34;太棒\u0026#34;, \u0026#34;start_offset\u0026#34; : 11, \u0026#34;end_offset\u0026#34; : 13, \u0026#34;type\u0026#34; : \u0026#34;CN_WORD\u0026#34;, \u0026#34;position\u0026#34; : 7 }, { \u0026#34;token\u0026#34; : \u0026#34;了\u0026#34;, \u0026#34;start_offset\u0026#34; : 13, \u0026#34;end_offset\u0026#34; : 14, \u0026#34;type\u0026#34; : \u0026#34;CN_CHAR\u0026#34;, \u0026#34;position\u0026#34; : 8 } ] } 3.3 扩展词词典\r随着互联网的发展，“造词运动”也越发的频繁。出现了很多新的词语，在原有的词汇列表中并不存在。比如：“奥力给”，“传智播客” 等。 所以我们的词汇也需要不断的更新，IK分词器提供了扩展词汇的功能。 1）打开IK分词器config目录： 2）在IKAnalyzer.cfg.xml配置文件内容添加：\n1 2 3 4 5 6 7 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE properties SYSTEM \u0026#34;http://java.sun.com/dtd/properties.dtd\u0026#34;\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;comment\u0026gt;IK Analyzer 扩展配置\u0026lt;/comment\u0026gt; \u0026lt;!--用户可以在这里配置自己的扩展字典 *** 添加扩展词典--\u0026gt; \u0026lt;entry key=\u0026#34;ext_dict\u0026#34;\u0026gt;ext.dic\u0026lt;/entry\u0026gt; \u0026lt;/properties\u0026gt; 3）新建一个 ext.dic，可以参考config目录下复制一个配置文件进行修改\n1 2 传智播客 奥力给 4）重启elasticsearch\n1 2 3 docker restart es # 查看 日志 docker logs -f elasticsearch 日志中已经成功加载ext.dic配置文件 5）测试效果：\n1 2 3 4 5 GET /_analyze { \u0026#34;analyzer\u0026#34;: \u0026#34;ik_max_word\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;传智播客Java就业超过90%,奥力给！\u0026#34; } 注意当前文件的编码必须是 UTF-8 格式，严禁使用Windows记事本编辑\n","date":"2022-12-14T00:00:00Z","image":"http://localhost:1313/p/docker/dbc-docker-desktop-home_hu5165119418789691799.webp","permalink":"http://localhost:1313/p/docker/","title":"Docker"},{"content":"git环境配置\r安装一路默认即可【一直next】 在桌面右键，多出了Git Bash Here\n1 2 3 4 5 # 打开Git Bash Here，复制命令并粘贴，右键paste # 配置用户名【填写自己的用户名】 git config --global user.name \u0026#34;your username\u0026#34; # 配置邮箱【填写自己的邮箱】 git config --global user.email \u0026#34;your email\u0026#34; 同时配置gitee和github\r参考博客\n1 2 git config --global --unset user.name \u0026#34;你的名字\u0026#34; git config --global --unset user.email \u0026#34;你的邮箱\u0026#34; 生成新的 SSH keys\rGithub\r1 ssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C \u0026#34;xxx@qq.com\u0026#34; 按三次回车\nGitee\r邮箱换一个，不与Github邮箱相同即可\n1 ssh-keygen -t rsa -f ~/.ssh/id_rsa.gitee -C \u0026#34;xxx@aliyun.com\u0026#34; 按三次回车 完成后会在~/.ssh / 目录下生成以下文件。\nid_rsa.github id_rsa.github.pub id_rsa.gitee id_rsa.gitee.pub 1 2 3 ssh-agent bash ssh-add ~/.ssh/id_rsa.github ssh-add ~/.ssh/id_rsa.gitee 创建一个名为config的文件，不带后缀，以文本形式打开，写入如下内容\n1 2 3 4 5 6 7 8 9 10 11 #Default gitHub user Self Host github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa.github # gitee Host gitee.com Port 22 HostName gitee.com User git IdentityFile ~/.ssh/id_rsa.gitee 添加 ssh到github和gitee中\n1 2 ssh -T git@gitee.com ssh -T git@github.com 输入yes\n补充\r说一下我遇到的问题，我是全程开着加速器的，毕竟github的特殊性\u0026hellip; 但是最后这一步测试github的连接始终是连不上，Connection reset by 140.82.114.4 port 22\n1 2 3 4 5 6 7 8 9 10 $ ping github.com Pinging github.com [140.82.114.4] with 32 bytes of data: Reply from 140.82.114.4: bytes=32 time=270ms TTL=41 Request timed out. Reply from 140.82.114.4: bytes=32 time=273ms TTL=41 Reply from 140.82.114.4: bytes=32 time=273ms TTL=41 Ping statistics for 140.82.114.4: Packets: Sent = 4, Received = 3, Lost = 1 (25% loss), Approximate round trip times in milli-seconds: Minimum = 270ms, Maximum = 273ms, Average = 272ms 看来确实是有问题的\n配置一下hosts文件就连上了 hosts文件在C:\\Windows\\System32\\drivers\\etc 点击测速，搜索github.com\n1 2 3 如我这里是20.205.243.166 则在hosts文件里添加 20.205.243.166 github.com 1 2 3 4 5 6 7 $ ssh -T git@github.com The authenticity of host \u0026#39;github.com (140.82.114.4)\u0026#39; can\u0026#39;t be established. ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU. This key is not known by any other names. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026#39;github.com\u0026#39; (ED25519) to the list of known hosts. Hi IsUnderAchiever! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access. 但是github克隆项目还是报错，开不开‘特殊手段’都是这样\n1 2 3 $ git clone https://github.com/nodejs/node.git Cloning into \u0026#39;node\u0026#39;... fatal: unable to access \u0026#39;https://github.com/nodejs/node.git/\u0026#39;: Failed to connect to github.com port 443 after 21049 ms: Couldn\u0026#39;t connect to server 只配置gitee或github\r以gitee为例，github类似 配置ssh免密登录\n1 2 3 4 5 6 7 8 ssh-keygen -t rsa -C \u0026#34;your email\u0026#34; # 按三次回车后，生成密钥【在用户目录下】 cat ~/.ssh/id_rsa.pub # 查看密钥 # 复制以上密钥 # 进入gitee，左侧找到SSH公钥，添加标题（自己随便写一个），公钥复制粘贴上一步查看的内容（注意不要携带空格） # 测试是否成功 (选择yes) ssh -T git@gitee.com ","date":"2022-12-13T00:00:00Z","image":"http://localhost:1313/p/git/branching-illustration@2x_hu1127098983321772738.png","permalink":"http://localhost:1313/p/git/","title":"Git"}]